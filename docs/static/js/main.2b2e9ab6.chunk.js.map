{"version":3,"sources":["grid.js","App.js","reportWebVitals.js","index.js"],"names":["BOARD","TIMEOUT","CELL_SIZE","Cell","x","y","filled","speed","className","style","left","top","width","height","transitionDuration","makeEmptyBoard","rows","cols","board","calculateNeighbors","neighbors","dirs","i","length","dir","y1","x1","Grid","boardRef","useRef","useState","isRunning","setRunning","setSpeed","size","setSize","useEffect","console","log","makeCells","cells","setCells","runIteration","newBoard","window","setTimeout","buttonClass","backgroundSize","onClick","event","elemOffset","rect","current","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","ref","map","row","col","j","type","min","max","value","onChange","target","clearTimeout","random","innerHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b2e9ab6.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport './Game.css';\nimport { CSSTransitionGroup } from 'react-transition-group' // ES6\n\nconst CELL_SIZE = 20;\n\nconst Cell = ({ x, y, filled, speed}) => {\n    return (\n        <div className={(filled ? 'cell' : 'empty') + ' transition'} style={{\n            left: `${CELL_SIZE * x + 1}px`,\n            top: `${CELL_SIZE * y + 1}px`,\n            width: `${CELL_SIZE - 1}px`,\n            height: `${CELL_SIZE - 1}px`,\n            transitionDuration: speed + 'ms'\n        }} />\n    );\n}\n\nconst makeEmptyBoard = (rows, cols) => {\n    let board = [];\n    for (let y = 0; y < rows; y++) {\n        board[y] = [];\n        for (let x = 0; x < cols; x++) {\n            board[y][x] = false;\n        }\n    }\n\n    return board;\n}\n\nlet BOARD\nlet TIMEOUT\n\nconst calculateNeighbors = (board, x, y, rows, cols) => {\n    let neighbors = 0;\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    for (let i = 0; i < dirs.length; i++) {\n        const dir = dirs[i];\n        let y1 = y + dir[0];\n        let x1 = x + dir[1];\n\n        if (x1 < 0) x1 = cols - 1\n        if (y1 < 0) y1 = rows - 1\n        // if (x1 < 0) continue\n        // if (y1 < 0) continue\n\n        if (x1 < cols && y1 < rows && board[y1][x1]) {\n            neighbors++;\n        }\n    }\n\n    return neighbors;\n}\n\nconst getElementOffset = (boardRef) => {\n    const rect = boardRef.current.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n        x: (rect.left + window.pageXOffset) - doc.clientLeft,\n        y: (rect.top + window.pageYOffset) - doc.clientTop,\n    };\n}\n\nconst Grid = ({}) => {\n    let boardRef = useRef(null)\n\n    let [isRunning, setRunning] = useState(false),\n        [speed, setSpeed] = useState(100),\n        [size, setSize]  = useState(30)\n\n    const rows = size,cols = size;\n    BOARD = BOARD || makeEmptyBoard(rows, cols);\n\n    useEffect(() => {\n        BOARD = makeEmptyBoard(rows, cols);\n        console.log('RESIZING', BOARD.length)\n    }, [size])\n\n    const makeCells= (rows, cols) => {\n        let cells = [];\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                if (BOARD[y][x]) {\n                    cells[`${x}${y}`] = true\n                }\n            }\n        }\n        return cells;\n    }\n    let [cells, setCells] = useState([])\n\n    const handleClick = (event) => {\n        const elemOffset = getElementOffset(boardRef);\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        \n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= cols && y >= 0 && y <= rows) {\n            BOARD[y][x] = !BOARD[y][x];\n        }\n        setCells(makeCells(rows, cols))\n    }\n    \n    const runGame = () => {\n        setRunning(true)\n        runIteration();\n    }\n    \n    const stopGame = () => {\n        setRunning(false)\n        console.log(TIMEOUT)\n            if (TIMEOUT) {\n                window.clearTimeout(TIMEOUT);\n                TIMEOUT = null;\n            }\n    }\n    \n    const runIteration = () => {\n        let newBoard = makeEmptyBoard(rows, cols);\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                let neighbors = calculateNeighbors(BOARD, x, y, rows, cols);\n                if (BOARD[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!BOARD[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        BOARD = newBoard;\n        setCells(makeCells(rows, cols))    \n        TIMEOUT = window.setTimeout(runIteration, speed);\n    }\n    \n    const handleIntervalChange = (event) => {\n        setSpeed(event.target.value)\n    }\n\n    const handleSizeChange = (event) => {\n        setSize(event.target.value)\n    }\n    \n    const handleClear = () => {\n        BOARD = makeEmptyBoard(rows, cols);\n        setCells(makeCells(rows, cols))\n    }\n    \n    const handleRandom = () => {\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                BOARD[y][x] = (Math.random() >= 0.5);\n            }\n        }\n        setCells(makeCells(rows, cols))\n    }\n    const handleResize = () => {\n        const height = (window.innerHeight - 70) //APPBAR HEIGHT - caluclate dynamically using offsetHeight\n        setSize(height / CELL_SIZE | 0)\n    }\n\n        const buttonClass = \"m-1 text-center bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500\\\n                items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white\\\n                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\\\n                \"\nwindow.board = BOARD\n        return (\n            <main className=\"min-w-0 flex-1 border-t border-gray-200 lg:flex\">\n            <section className=\"min-w-0 flex-1 h-full flex flex-col overflow-hidden lg:order-last\">\n          <div className=\"Board\"\n                    style={{ width: size * CELL_SIZE, height: size * CELL_SIZE, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={handleClick}\n                    ref={boardRef}>\n                        {BOARD.map((row, i) => (\n                            row.map((col, j) => {\n                                return <Cell speed={speed * 3} filled={cells[`${i}${j}`]} x={i} y={j} key={`${i},${j}`}/>\n                            })\n                        ))}\n                    </div>\n        </section>\n             \n        <aside className=\"lg:block lg:flex-shrink-0 lg:order-first\">\n          <div className=\"h-full relative flex flex-col w-96 border-r border-gray-200 bg-gray-100 p-4\">\n                    <label> Speed<input type=\"range\" min=\"10\" max=\"1000\" value={speed} onChange={handleIntervalChange} />\n                    {speed}ms\n                    </label>\n                    <label> Size<input min=\"10\" max=\"150\" type=\"range\" value={size} onChange={handleSizeChange} />\n                    {size}\n                    </label>\n\n                    {isRunning ?\n                        <button className={buttonClass} onClick={stopGame}>Pause</button> :\n                        <button className={buttonClass} onClick={runGame}>Play</button>\n                    }\n                    <button className={buttonClass} onClick={handleRandom}>Randomise</button>\n                    <button className={buttonClass} onClick={handleClear}>Clear Board</button>\n                    <button className={buttonClass} onClick={handleResize}>Resize to Fit</button>\n                </div>\n        </aside>\n        </main>\n        )\n}\n\nexport default Grid;","import './App.css';\nimport Grid from './grid'\n\nfunction Board ( ) {\n  const row = 10, col = 10;\n\n  const cells = new Array(row * col).fill(0).map(d => <div className='cell'></div>)\n  return <div className=\"h-64 grid grid-rows-3 grid-flow-col\">\n  {cells}\n  </div>\n}\n\nfunction App() {\n  return (\n    <div className=\"bg-gray-100\">\n      <nav className=\"bg-gradient-to-r from-light-blue-800 to-cyan-600\">\n        <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n          <div className=\"relative flex items-center justify-between h-16\">\n            <div className=\"flex items-center px-2 lg:px-0\">\n              <div className=\"flex-shrink-0 text-white\">\n                Conway's Game of Life\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}