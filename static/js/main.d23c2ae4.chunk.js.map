{"version":3,"sources":["Game.js","Controls.js","Grid.js","App.js","reportWebVitals.js","index.js"],"names":["BOARD","TIMEOUT","buttonClass","Controls","speed","handleIntervalChange","rows","handleRowChange","cols","handleColumnChange","isRunning","stopGame","runGame","handleRandom","handleClear","handleResize","className","onClick","min","max","type","value","onChange","Cell","x","y","filled","cell_size","style","left","top","width","height","transitionDuration","Grid","handleClick","handleMouseMove","board","boardRef","cells","onMouseMove","ref","map","row","i","_","j","makeEmptyBoard","calculateNeighbors","neighbors","dirs","length","dir","y1","x1","Game","useRef","useState","setRunning","setSpeed","setRows","setColumns","window","useEffect","makeCells","setCells","toggleCells","event","elemOffset","rect","current","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","runIteration","newBoard","setTimeout","controlProps","target","clearTimeout","random","innerHeight","innerWidth","gridProps","shiftKey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d23c2ae4.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport Controls from \"./Controls\";\nimport Grid from \"./Grid\";\n\nimport \"./Game.css\";\n\nlet BOARD;\nlet TIMEOUT;\nconst CELL_SIZE = 20;\n\nconst makeEmptyBoard = (cols, rows) => {\n  let board = [];\n  for (let y = 0; y < rows; y++) {\n    board[y] = [];\n    for (let x = 0; x < cols; x++) {\n      board[y][x] = false;\n    }\n  }\n  return board;\n};\n\nconst calculateNeighbors = (board, x, y, rows, cols) => {\n  let neighbors = 0;\n\n  const dirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n  ];\n  for (let i = 0; i < dirs.length; i++) {\n    const dir = dirs[i];\n    let y1 = y + dir[0];\n    let x1 = x + dir[1];\n\n    if (x1 < 0) x1 = cols - 1;\n    if (y1 < 0) y1 = rows - 1;\n    // if (x1 < 0) continue\n    // if (y1 < 0) continue\n\n    if (x1 < cols && y1 < rows && board[y1][x1]) {\n      neighbors++;\n    }\n  }\n\n  return neighbors;\n};\n\nconst getElementOffset = (boardRef) => {\n  const rect = boardRef.current.getBoundingClientRect();\n  const doc = document.documentElement;\n\n  return {\n    x: rect.left + window.pageXOffset - doc.clientLeft,\n    y: rect.top + window.pageYOffset - doc.clientTop,\n  };\n};\n\nconst Game = ({}) => {\n  let boardRef = useRef(null);\n\n  let [isRunning, setRunning] = useState(false),\n    [speed, setSpeed] = useState(100),\n    [rows, setRows] = useState(30),\n    [cols, setColumns] = useState(30);\n\n  BOARD = BOARD || makeEmptyBoard(rows, cols);\n  window.board = BOARD;\n  useEffect(() => {\n    BOARD = makeEmptyBoard(rows, cols);\n  }, [cols, rows]);\n\n  const makeCells = (rows, cols) => {\n    let cells = [];\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        if (BOARD[y][x]) {\n          cells[`${x},${y}`] = true;\n        }\n      }\n    }\n    return cells;\n  };\n  let [cells, setCells] = useState([]);\n\n  const toggleCells = (event) => {\n    const elemOffset = getElementOffset(boardRef);\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= cols && y >= 0 && y <= rows) {\n      BOARD[y][x] = !BOARD[y][x];\n    }\n    setCells(makeCells(rows, cols));\n  };\n  const handleMouseMove = (event) => {\n    if (event.shiftKey) toggleCells(event);\n  };\n\n  const handleClick = (event) => {\n    toggleCells(event);\n  };\n\n  const runGame = () => {\n    setRunning(true);\n    runIteration();\n  };\n\n  const stopGame = () => {\n    setRunning(false);\n    if (TIMEOUT) {\n      window.clearTimeout(TIMEOUT);\n      TIMEOUT = void 0;\n    }\n  };\n\n  const runIteration = () => {\n    let newBoard = makeEmptyBoard(rows, cols);\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        let neighbors = calculateNeighbors(BOARD, x, y, rows, cols);\n        if (BOARD[y][x]) {\n          newBoard[y][x] = neighbors === 2 || neighbors === 3;\n        } else {\n          newBoard[y][x] = !BOARD[y][x] && neighbors === 3;\n        }\n      }\n    }\n\n    BOARD = newBoard;\n    setCells(makeCells(rows, cols));\n    TIMEOUT = window.setTimeout(runIteration, speed);\n  };\n\n  const handleIntervalChange = (event) => {\n    setSpeed(event.target.value);\n  };\n\n  const handleColumnChange = (event) => {\n    setColumns(event.target.value);\n  };\n  const handleRowChange = (event) => {\n    setRows(event.target.value);\n  };\n\n  const handleClear = () => {\n    BOARD = makeEmptyBoard(rows, cols);\n    setCells(makeCells(rows, cols));\n  };\n\n  const handleRandom = () => {\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        BOARD[y][x] = Math.random() >= 0.4;\n      }\n    }\n    setCells(makeCells(rows, cols));\n  };\n\n  const handleResize = () => {\n    const height = window.innerHeight - 55; //TODO - calculate dynamically using offsetHeight\n    setRows((height / CELL_SIZE) | 0);\n    setColumns((window.innerWidth / CELL_SIZE) | 0);\n  };\n\n  let controlProps = {\n    speed,\n    handleIntervalChange,\n    rows,\n    handleRowChange,\n    cols,\n    handleColumnChange,\n    isRunning,\n    stopGame,\n    runGame,\n    handleRandom,\n    handleClear,\n    handleResize,\n  };\n\n  const gridProps = {\n    handleClick,\n    handleMouseMove,\n    board: BOARD,\n    boardRef,\n    cols,\n    rows,\n    speed,\n    cells,\n    cell_size: CELL_SIZE,\n  };\n\n  return (\n    <div className=\"bg-gray-100 shadow h-auto\">\n      <nav className=\"bg-gradient-to-r from-light-blue-800 to-cyan-600 px-2 sm:px-6\">\n        <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n          <div className=\"relative flex items-center justify-between h-16\">\n            <div className=\"flex items-center px-2 lg:px-0\">\n              <div className=\"flex-shrink-0 text-white\">\n                Conway's Game of Life\n              </div>\n              <Controls {...controlProps}></Controls>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <Grid {...gridProps}></Grid>\n    </div>\n  );\n};\n\nexport default Game;\n","const buttonClass =\n  `mx-1 relative inline-flex items-center \n  px-2 py-1 border border-gray-300 text-sm font-medium \n  rounded text-gray-700 bg-gray-50 hover:bg-gray-100 \n  focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`;\n\nconst Controls = ({\n  speed,\n  handleIntervalChange,\n  rows,\n  handleRowChange,\n  cols,\n  handleColumnChange,\n  isRunning,\n  stopGame,\n  runGame,\n  handleRandom,\n  handleClear,\n  handleResize,\n}) => {\n  return (\n    <div className=\"mt-4 flex md:mt-0 md:ml-4 text-white\">\n      {isRunning ? (\n        <button className={buttonClass} onClick={stopGame}>\n          Pause\n        </button>\n      ) : (\n        <button className={buttonClass} onClick={runGame}>\n          Play &#9658;\n        </button>\n      )}\n      <button className={buttonClass} onClick={handleRandom}>\n        Randomise\n      </button>\n      <button className={buttonClass} onClick={handleClear}>\n        Clear\n      </button>\n      <button className={buttonClass} onClick={handleResize}>\n        Resize\n      </button>\n\n      <div className=\"px-5\">\n        <label className=\"block text-sm font-medium\">rows</label>\n        <div className=\"mt-1\">\n          <input\n            className=\"text-black shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block sm:text-sm border-gray-300 rounded-md\"\n            min=\"10\"\n            max=\"150\"\n            type=\"number\"\n            value={rows}\n            onChange={handleRowChange}\n          />\n        </div>\n      </div>\n\n      <div className=\"px-5\">\n        <label className=\"block text-sm font-medium\">Cols</label>\n        <div className=\"mt-1\">\n          <input\n            className=\" text-black shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block  sm:text-sm border-gray-300 rounded-md\"\n            min=\"10\"\n            max=\"150\"\n            type=\"number\"\n            value={cols}\n            onChange={handleColumnChange}\n          />\n        </div>\n      </div>\n\n      <div className=\"px-5\">\n        <label className=\"block text-sm font-medium\">Speed</label>\n\n        <div className=\"mt-1\">\n          <input\n            className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-128\"\n            min=\"10\"\n            max=\"1000\"\n            type=\"range\"\n            value={speed}\n            onChange={handleIntervalChange}\n          />\n          {\" \" + speed}ms\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","const Cell = ({ x, y, filled, speed, cell_size }) => {\n  return (\n    <div\n      className={(filled ? \"cell\" : \"empty\") + \" transition\"}\n      style={{\n        left: `${cell_size * x + 1}px`,\n        top: `${cell_size * y + 1}px`,\n        width: `${cell_size - 1}px`,\n        height: `${cell_size - 1}px`,\n        transitionDuration: speed + \"ms\",\n      }}\n    />\n  );\n};\n\nconst Grid = ({\n  handleClick,\n  handleMouseMove,\n  board,\n  boardRef,\n  cols,\n  rows,\n  speed,\n  cells,\n  cell_size,\n}) => {\n  return (\n    <main className=\"min-w-0 flex-1 border-t border-gray-200 lg:flex\">\n      <section className=\"min-w-0 flex-1 h-full flex flex-col lg:order-last\">\n        <div\n          className=\"Board\"\n          style={{\n            width: cols * cell_size,\n            height: rows * cell_size,\n          }}\n          onClick={handleClick}\n          onMouseMove={handleMouseMove}\n          ref={boardRef}\n        >\n          {board.map((row, i) =>\n            row.map((_, j) => {\n              return (\n                <Cell\n                  cell_size={cell_size}\n                  speed={speed * 3}\n                  filled={cells[`${i},${j}`]}\n                  x={i}\n                  y={j}\n                  key={`${i},${j}`}\n                />\n              );\n            })\n          )}\n        </div>\n      </section>\n    </main>\n  );\n};\nexport default Grid;\n","import \"./App.css\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}