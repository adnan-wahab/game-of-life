{"version":3,"sources":["grid.js","App.js","reportWebVitals.js","index.js"],"names":["BOARD","TIMEOUT","CELL_SIZE","Cell","x","y","filled","speed","className","style","left","top","width","height","transitionDuration","makeEmptyBoard","rows","cols","board","calculateNeighbors","neighbors","dirs","i","length","dir","y1","x1","Grid","useState","boardRef","useRef","isRunning","setRunning","setSpeed","size","setSize","useEffect","makeCells","cells","setCells","toggleCells","event","elemOffset","rect","current","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","runIteration","newBoard","setTimeout","buttonClass","onClick","onMouseMove","shiftKey","ref","map","row","col","j","type","min","max","value","onChange","target","clearTimeout","random","innerHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wLAIIA,EACAC,E,2EAFEC,EAAY,GAIZC,EAAO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,EAAGC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC5B,OACE,qBACEC,WAAYF,EAAS,OAAS,SAAW,cACzCG,MAAO,CACLC,KAAK,GAAD,OAAKR,EAAYE,EAAI,EAArB,MACJO,IAAI,GAAD,OAAKT,EAAYG,EAAI,EAArB,MACHO,MAAM,GAAD,OAAKV,GAAL,MACLW,OAAO,GAAD,OAAKX,GAAL,MACNY,mBAAoBP,EAAQ,SAM9BQ,EAAiB,SAACC,EAAMC,GAE5B,IADA,IAAIC,EAAQ,GACHb,EAAI,EAAGA,EAAIW,EAAMX,IAAK,CAC7Ba,EAAMb,GAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIa,EAAMb,IACxBc,EAAMb,GAAGD,IAAK,EAIlB,OAAOc,GAGHC,EAAqB,SAACD,EAAOd,EAAGC,EAAGW,EAAMC,GAa7C,IAZA,IAAIG,EAAY,EAEVC,EAAO,CACX,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IAEEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAME,EAAMH,EAAKC,GACbG,EAAKpB,EAAImB,EAAI,GACbE,EAAKtB,EAAIoB,EAAI,GAEbE,EAAK,IAAGA,EAAKT,EAAO,GACpBQ,EAAK,IAAGA,EAAKT,EAAO,GAIpBU,EAAKT,GAAQQ,EAAKT,GAAQE,EAAMO,GAAIC,IACtCN,IAIJ,OAAOA,GA8NMO,EAjNF,SAAC,GAAQ,qBACYC,oBAAS,GADtB,mBAEfC,GAFe,UAEJC,iBAAO,OAFH,EAIWF,oBAAS,GAJpB,mBAIdG,EAJc,KAIHC,EAJG,OAKGJ,mBAAS,KALZ,mBAKhBrB,EALgB,KAKT0B,EALS,OAMCL,mBAAS,IANV,mBAMhBM,EANgB,KAMVC,EANU,KAQbnB,EAAOkB,EACXjB,EAAOiB,EACTlC,EAAQA,GAASe,EAAeC,EAAMC,GAEtCmB,qBAAU,WACRpC,EAAQe,EAAeC,EAAMC,KAC5B,CAACA,EAAMD,IAEV,IAAMqB,EAAY,SAACrB,EAAMC,GAEvB,IADA,IAAIqB,EAAQ,GACHjC,EAAI,EAAGA,EAAIW,EAAMX,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIa,EAAMb,IACpBJ,EAAMK,GAAGD,KACXkC,EAAM,GAAD,OAAIlC,EAAJ,YAASC,KAAO,GAI3B,OAAOiC,GAzBU,EA2BKV,mBAAS,IA3Bd,mBA2BdU,EA3Bc,KA2BPC,EA3BO,KA8BbC,EAAc,SAACC,GACnB,IAAMC,EAzCe,SAACb,GACxB,IAAMc,EAAOd,EAASe,QAAQC,wBACxBC,EAAMC,SAASC,gBAErB,MAAO,CACL5C,EAAGuC,EAAKjC,KAAOuC,OAAOC,YAAcJ,EAAIK,WACxC9C,EAAGsC,EAAKhC,IAAMsC,OAAOG,YAAcN,EAAIO,WAmCpBC,CAAiBzB,GAC9B0B,EAAUd,EAAMe,QAAUd,EAAWtC,EACrCqD,EAAUhB,EAAMiB,QAAUhB,EAAWrC,EAErCD,EAAIuD,KAAKC,MAAML,EAAUrD,GACzBG,EAAIsD,KAAKC,MAAMH,EAAUvD,GAE3BE,GAAK,GAAKA,GAAKa,GAAQZ,GAAK,GAAKA,GAAKW,IACxChB,EAAMK,GAAGD,IAAMJ,EAAMK,GAAGD,IAE1BmC,EAASF,EAAUrB,EAAMC,KAyBrB4C,EAAe,SAAfA,IAGJ,IAFA,IAAIC,EAAW/C,EAAeC,EAAMC,GAE3BZ,EAAI,EAAGA,EAAIW,EAAMX,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIa,EAAMb,IAAK,CAC7B,IAAIgB,EAAYD,EAAmBnB,EAAOI,EAAGC,EAAGW,EAAMC,GAClDjB,EAAMK,GAAGD,GACT0D,EAASzD,GAAGD,GAAmB,IAAdgB,GAAiC,IAAdA,EAEpC0C,EAASzD,GAAGD,IAAMJ,EAAMK,GAAGD,IAAoB,IAAdgB,EAKzCpB,EAAQ8D,EACRvB,EAASF,EAAUrB,EAAMC,IACzBhB,EAAUgD,OAAOc,WAAWF,EAActD,IA6BtCyD,EACJ,qUAKF,OADAf,OAAO/B,MAAQlB,EAEb,uBAAMQ,UAAU,kDAAhB,UACE,yBAASA,UAAU,oEAAnB,SACE,qBACEA,UAAU,QACVC,MAAO,CACLG,MAAOsB,EAAOhC,EACdW,OAAQqB,EAAOhC,GAEjB+D,QA7EY,SAACxB,GACnBD,EAAYC,IA6ENyB,YAnFgB,SAACzB,GACnBA,EAAM0B,UAAU3B,EAAYC,IAmF1B2B,IAAKvC,EARP,SAUG7B,EAAMqE,KAAI,SAACC,EAAKhD,GAAN,OACTgD,EAAID,KAAI,SAACE,EAAKC,GACZ,OACE,cAAC,EAAD,CACEjE,MAAe,EAARA,EACPD,OAAQgC,EAAM,GAAD,OAAIhB,EAAJ,YAASkD,IACtBpE,EAAGkB,EACHjB,EAAGmE,GAJL,UAKUlD,EALV,YAKekD,cAQzB,uBAAOhE,UAAU,2CAAjB,SACE,sBAAKA,UAAU,8EAAf,UACA,gCACE,uBAAOA,UAAU,0CAAjB,mBAGE,sBAAKA,UAAU,OAAf,UAEA,uBACEA,UAAU,mEACViE,KAAK,QACLC,IAAI,KACJC,IAAI,OACJC,MAAOrE,EACPsE,SA3EiB,SAACpC,GAC5BR,EAASQ,EAAMqC,OAAOF,UA4Eb,IAAMrE,EAVP,WAcA,gCAEF,uBAAOC,UAAU,0CAAjB,kBAGE,sBAAKA,UAAU,OAAf,UACA,uBACEA,UAAU,mEACVkE,IAAI,KACJC,IAAI,MACJF,KAAK,QACLG,MAAO1C,EACP2C,SAzFa,SAACpC,GACxBN,EAAQM,EAAMqC,OAAOF,UA0FZ1C,QAKFH,EACC,wBAAQvB,UAAWwD,EAAaC,QAhIzB,WACfjC,GAAW,GACP/B,IACFgD,OAAO8B,aAAa9E,GACpBA,OAAU,IA4HJ,mBAIA,wBAAQO,UAAWwD,EAAaC,QAzI1B,WACdjC,GAAW,GACX6B,KAuIQ,kBAIF,wBAAQrD,UAAWwD,EAAaC,QAhGnB,WACnB,IAAK,IAAI5D,EAAI,EAAGA,EAAIW,EAAMX,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIa,EAAMb,IACxBJ,EAAMK,GAAGD,GAAKuD,KAAKqB,UAAY,GAGnCzC,EAASF,EAAUrB,EAAMC,KA0FnB,uBAGA,wBAAQT,UAAWwD,EAAaC,QAxGpB,WAClBjE,EAAQe,EAAeC,EAAMC,GAC7BsB,EAASF,EAAUrB,EAAMC,KAsGnB,yBAGA,wBAAQT,UAAWwD,EAAaC,QA9FnB,WACnB,IAAMpD,EAASoC,OAAOgC,YAAc,GACpC9C,EAAStB,EAASX,EAAa,IA4FzB,oCC7PKgF,MAnBf,WACE,OACE,sBAAK1E,UAAU,4BAAf,UACE,qBAAKA,UAAU,gEAAf,SACE,qBAAKA,UAAU,yCAAf,SACE,qBAAKA,UAAU,kDAAf,SACE,qBAAKA,UAAU,iCAAf,SACE,qBAAKA,UAAU,2BAAf,2CAOR,cAAC,EAAD,QCLS2E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASgD,eAAe,SAM1BZ,M","file":"static/js/main.b860aea0.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./Game.css\";\n\nconst CELL_SIZE = 20;\nlet BOARD;\nlet TIMEOUT;\n\nconst Cell = ({ x, y, filled, speed }) => {\n  return (\n    <div\n      className={(filled ? \"cell\" : \"empty\") + \" transition\"}\n      style={{\n        left: `${CELL_SIZE * x + 1}px`,\n        top: `${CELL_SIZE * y + 1}px`,\n        width: `${CELL_SIZE - 1}px`,\n        height: `${CELL_SIZE - 1}px`,\n        transitionDuration: speed + \"ms\",\n      }}\n    />\n  );\n};\n\nconst makeEmptyBoard = (rows, cols) => {\n  let board = [];\n  for (let y = 0; y < rows; y++) {\n    board[y] = [];\n    for (let x = 0; x < cols; x++) {\n      board[y][x] = false;\n    }\n  }\n\n  return board;\n};\n\nconst calculateNeighbors = (board, x, y, rows, cols) => {\n  let neighbors = 0;\n\n  const dirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n  ];\n  for (let i = 0; i < dirs.length; i++) {\n    const dir = dirs[i];\n    let y1 = y + dir[0];\n    let x1 = x + dir[1];\n\n    if (x1 < 0) x1 = cols - 1;\n    if (y1 < 0) y1 = rows - 1;\n    // if (x1 < 0) continue\n    // if (y1 < 0) continue\n\n    if (x1 < cols && y1 < rows && board[y1][x1]) {\n      neighbors++;\n    }\n  }\n\n  return neighbors;\n};\n\nconst getElementOffset = (boardRef) => {\n  const rect = boardRef.current.getBoundingClientRect();\n  const doc = document.documentElement;\n\n  return {\n    x: rect.left + window.pageXOffset - doc.clientLeft,\n    y: rect.top + window.pageYOffset - doc.clientTop,\n  };\n};\n\nconst Grid = ({}) => {\n    let [dragging, setDragging] = useState(false)\n  let boardRef = useRef(null);\n\n  let [isRunning, setRunning] = useState(false),\n    [speed, setSpeed] = useState(100),\n    [size, setSize] = useState(30);\n\n  const rows = size,\n    cols = size;\n  BOARD = BOARD || makeEmptyBoard(rows, cols);\n\n  useEffect(() => {\n    BOARD = makeEmptyBoard(rows, cols);\n  }, [cols, rows]);\n\n  const makeCells = (rows, cols) => {\n    let cells = [];\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        if (BOARD[y][x]) {\n          cells[`${x},${y}`] = true;\n        }\n      }\n    }\n    return cells;\n  };\n  let [cells, setCells] = useState([]);\n\n\n  const toggleCells = (event) => {\n    const elemOffset = getElementOffset(boardRef);\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= cols && y >= 0 && y <= rows) {\n      BOARD[y][x] = !BOARD[y][x];\n    }\n    setCells(makeCells(rows, cols));\n\n  }\n  const handleMouseMove = (event) => {\n    if (event.shiftKey) toggleCells(event)\n  }\n\n\n  const handleClick = (event) => {\n    toggleCells(event)\n  };\n\n  const runGame = () => {\n    setRunning(true);\n    runIteration();\n  };\n\n  const stopGame = () => {\n    setRunning(false);\n    if (TIMEOUT) {\n      window.clearTimeout(TIMEOUT);\n      TIMEOUT = void 0;\n    }\n  };\n\n  const runIteration = () => {\n    let newBoard = makeEmptyBoard(rows, cols);\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        let neighbors = calculateNeighbors(BOARD, x, y, rows, cols);\n        if (BOARD[y][x]) {\n            newBoard[y][x] = neighbors === 2 || neighbors === 3\n        } else {\n            newBoard[y][x] = !BOARD[y][x] && neighbors === 3\n        }\n      }\n    }\n\n    BOARD = newBoard;\n    setCells(makeCells(rows, cols));\n    TIMEOUT = window.setTimeout(runIteration, speed);\n  };\n\n  const handleIntervalChange = (event) => {\n    setSpeed(event.target.value);\n  };\n\n  const handleSizeChange = (event) => {\n    setSize(event.target.value);\n  };\n\n  const handleClear = () => {\n    BOARD = makeEmptyBoard(rows, cols);\n    setCells(makeCells(rows, cols));\n  };\n\n  const handleRandom = () => {\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        BOARD[y][x] = Math.random() >= 0.5;\n      }\n    }\n    setCells(makeCells(rows, cols));\n  };\n  const handleResize = () => {\n    const height = window.innerHeight - 55; //APPBAR HEIGHT - caluclate dynamically using offsetHeight\n    setSize((height / CELL_SIZE) | 0);\n  };\n\n  const buttonClass =\n    \"m-1 text-center bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500\\\n                items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white\\\n                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\\\n                \";\n  window.board = BOARD;\n  return (\n    <main className=\"min-w-0 flex-1 border-t border-gray-200 lg:flex\">\n      <section className=\"min-w-0 flex-1 h-full flex flex-col overflow-hidden lg:order-last\">\n        <div\n          className=\"Board\"\n          style={{\n            width: size * CELL_SIZE,\n            height: size * CELL_SIZE,\n          }}\n          onClick={handleClick}\n          onMouseMove={handleMouseMove}\n          ref={boardRef}\n        >\n          {BOARD.map((row, i) =>\n            row.map((col, j) => {\n              return (\n                <Cell\n                  speed={speed * 3}\n                  filled={cells[`${i},${j}`]}\n                  x={i}\n                  y={j}\n                  key={`${i},${j}`}\n                />\n              );\n            })\n          )}\n        </div>\n      </section>\n\n      <aside className=\"lg:block lg:flex-shrink-0 lg:order-first\">\n        <div className=\"h-full relative flex flex-col w-96 border-r border-gray-200 bg-gray-100 p-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700\">\n            Speed\n            </label>\n            <div className=\"mt-1\">\n\n            <input\n              className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-128\"\n              type=\"range\"\n              min=\"10\"\n              max=\"1000\"\n              value={speed}\n              onChange={handleIntervalChange}\n            />\n            {\" \" + speed}ms\n            </div>\n            </div>\n\n            <div>\n\n          <label className=\"block text-sm font-medium text-gray-700\">\n            Size\n            </label>\n            <div className=\"mt-1\">\n            <input\n              className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-128\"\n              min=\"10\"\n              max=\"150\"\n              type=\"range\"\n              value={size}\n              onChange={handleSizeChange}\n            />\n            {size}\n            </div>\n            </div>\n\n\n          {isRunning ? (\n            <button className={buttonClass} onClick={stopGame}>\n              Pause\n            </button>\n          ) : (\n            <button className={buttonClass} onClick={runGame}>\n              Play\n            </button>\n          )}\n          <button className={buttonClass} onClick={handleRandom}>\n            Randomise\n          </button>\n          <button className={buttonClass} onClick={handleClear}>\n            Clear Board\n          </button>\n          <button className={buttonClass} onClick={handleResize}>\n            Resize to Fit\n          </button>\n        </div>\n      </aside>\n    </main>\n  );\n};\n\nexport default Grid;\n","import \"./App.css\";\nimport Grid from \"./grid\";\n\nfunction App() {\n  return (\n    <div className=\"bg-gray-100 shadow h-full\">\n      <nav className=\"bg-gradient-to-r from-light-blue-800 to-cyan-600 px-2 sm:px-6\">\n        <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n          <div className=\"relative flex items-center justify-between h-16\">\n            <div className=\"flex items-center px-2 lg:px-0\">\n              <div className=\"flex-shrink-0 text-white\">\n                Conway's Game of Life\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}